import React, { useEffect, useRef, useState } from 'react';
import { classNames } from 'primereact/utils';
import { Route, Routes, useLocation, useNavigate } from 'react-router-dom';
import { QueryCache, ReactQueryCacheProvider } from "react-query";
import Swal from 'sweetalert2';
import { Dialog } from "primereact/dialog";
import { Button } from "primereact/button";
import { useMsal, useIsAuthenticated } from "@azure/msal-react";
import { useIdleTimer } from "react-idle-timer";
import { ProgressSpinner } from 'primereact/progressspinner';

import moment from 'moment';

import { AdfsConfig, graphConfig, loginRequest } from "./adfsl/config.js";

import { ApiLink } from './aws_config/apilink.js';
import { Encode, Decode } from "./encodedecode.js";

import AppTopbar from './AppTopbar';
import AppBreadcrumb from './AppBreadcrumb';
import AppFooter from './AppFooter';

//

import PrimeReact from 'primereact/api';

import 'primereact/resources/primereact.min.css';
import 'primeicons/primeicons.css';
import 'primeflex/primeflex.css';
import './App.scss';

import BITSPosition from './pages/BITSPosition/index.js';
import Login from './pages/Login/index.js';
import User from './pages/SecurityModel/User';
import Menu from './pages/SecurityModel/Menu';
import Role from './pages/SecurityModel/Role';
import Tab from './pages/SecurityModel/Tab';


import S2BMasters from './pages/S2BGlobal/S2BMasters';
import S2BCustomerAccountMaster from './pages/S2BGlobal/S2BCustomerAccountMaster';
import S2BCustomerMapping from './pages/S2BGlobal/S2BCustomerMapping';
import S2BPreDefinedRuleMaster from './pages/S2BGlobal/S2BPreDefinedRuleMaster';
import S2BOutputDataMapping from './pages/S2BGlobal/S2BOutputDataMapping';
import S2BInvoicingMasters from './pages/S2BGlobal/S2BBillingMasters';
import S2BServiceDayMaster from './pages/S2BGlobal/S2BServiceDayMaster';
import S2BGlobalTechAdmin from './pages/S2BGlobal/S2BGlobalTechAdmin';
import S2BCMSTechAdmin from './pages/S2BGlobal/S2BGlobalCMSTechAdmin';

import S2BRateMaster from './pages/S2BGlobal/S2BRateMaster';
import S2BAdditionalRateMaster from './pages/S2BGlobal/S2BAdditionalRateMaster';
import S2BRateRevision from './pages/S2BGlobal/S2BRateRevision';
import S2BAdjustmentFactor from './pages/S2BGlobal/S2BAdjustmentFactor';
import S2BGlobalRateMaster from './pages/S2BGlobal/S2BGlobalRateMaster';

import S2BCMSRateMaster from './pages/S2BGlobal/S2BGlobalCMSRateMaster';

import S2BGlobalTechConfigurator from './pages/S2BGlobal/S2BGlobalTechConfigurator';
import S2BCustomerSourceMaster from './pages/S2BGlobal/S2BCustomerSourceMaster';
import S2BCustomerSourcetoS2BDataMapping from './pages/S2BGlobal/S2BCustomerSourcetoS2BDataMapping';
import S2BServiceException from './pages/S2BGlobal/S2BServiceException';
import S2BRuleMapping from './pages/S2BGlobal/S2BRuleMapping';
import S2BRuleParameterMapping from './pages/S2BGlobal/S2BRuleParameterMapping';
import S2BServiceRuleParameterMapping from './pages/S2BGlobal/S2BServiceRuleParameterMapping';
import S2BUserDefinedRuleMaster from './pages/S2BGlobal/S2BUserDefinedRuleMaster';
import S2BFormulaConfiguration from './pages/S2BGlobal/S2BFormulaConfiguration';
import S2BCustomerDestinationMaster from './pages/S2BGlobal/S2BCustomerDestinationMaster';
import S2BCustomerDestinationDataMapping from './pages/S2BGlobal/S2BCustomerDestinationDataMapping';
import S2BSummaryDataMapping from './pages/S2BGlobal/S2BSummaryDataMapping';
import S2BScheduleMaster from './pages/S2BGlobal/S2BScheduleMaster';

import S2BCMSTechConfigurator from './pages/S2BGlobal/S2BGlobalCMSTechConfigurator';

import S2BGlobalBilling from './pages/S2BGlobal/S2BGlobalBilling';
import S2BInvoicingReport from './pages/S2BGlobal/S2BBillingStatus';
import S2BChargeSummary from './pages/S2BGlobal/S2BChargeSummary';
import S2BTransactions from './pages/S2BGlobal/S2BTransactions';

import S2BGlobalExceptionBilling from './pages/S2BGlobal/S2BGlobalExceptionBilling';
import S2BReports from './pages/S2BGlobal/S2BReports';

import S2BScheduleErrorLogs from './pages/S2BGlobal/S2BScheduleErrorLogs';

import S2BAdhocTransactions from './pages/S2BGlobal/S2BManualTransactions';
import S2BCMSBilling from './pages/S2BGlobal/S2BGlobalCMSBilling';
import Rolemap from './pages/SecurityModel/Rolemap/index.js';

export const RTLContext = React.createContext();

const App = () => {
    document.title = "TVSSCS - Global";
    const queryCache = new QueryCache();
    const [activeTopbarItem, setActiveTopbarItem] = useState(null);
    const [isRTL, setRTL] = useState(false);
    const [mobileTopbarActive, setMobileTopbarActive] = useState(false);
    const [inlineMenuActive, setInlineMenuActive] = useState({});
    const copyTooltipRef = useRef();
    let currentInlineMenuKey = useRef(null);
    const location = useLocation();
    const { instance, accounts } = useMsal();
    const navigate = useNavigate()
    let isAuthenticated = useIsAuthenticated();
    const [isuserAuthenticated, setUserAuthenticated] = useState(false);
    const [Idle, setIdle] = useState(false);
    const [loading, setLoading] = useState(false);
    const [visible, setVisible] = useState(true);



    const [currentRole, setCurrentRole] = useState("");

    const DEV_URL = ApiLink.securitymodel;
    let timer;
    PrimeReact.ripple = true;

    let topbarItemClick;
    let inlineMenuClick;

    const routes = [
        // { path: '/', parent: '', label: '' },
        { path: '/securitymodel/tab', parent: 'Security Model', label: 'Tab' },
        { path: '/s2bglobal/s2bglobaltechadmin', parent: 'S2B Global', label: 'S2B Global Tech Admin' },
        { path: '/s2bglobal/s2bcmstechadmin', parent: 'S2B Global', label: 'S2B CMS Tech Admin' },
        { path: '/s2bglobal/s2bglobalratemaster', parent: 'S2B Global', label: 'S2B Global Rate Master' },
        { path: '/s2bglobal/s2bcmsratemaster', parent: 'S2B Global', label: 'S2B CMS Rate Master' },
        { path: '/s2bglobal/s2bglobaltechconfigurator', parent: 'S2B Global', label: 'S2B Global Tech Configurator' },
        { path: '/s2bglobal/s2bcmstechconfigurator', parent: 'S2B Global', label: 'S2B CMS Tech Configurator' },
        { path: '/s2bglobal/s2bglobalbilling', parent: 'S2B Global', label: 'S2B Global Billing' },
        { path: '/s2bglobal/s2bcmsbilling', parent: 'S2B Global', label: 'S2B CMS Billing' },
        { path: '/s2bglobal/s2bexceptionhandling', parent: 'S2B Global', label: 'S2B Global Exception Handling' }
    ];

    useEffect(() => {
        copyTooltipRef && copyTooltipRef.current && copyTooltipRef.current.updateTargetEvents();
        let UserRoleKeyName = localStorage.getItem('UserRoleKeyName');
        let rolename = UserRoleKeyName ? Decode(UserRoleKeyName) : UserRoleKeyName;
        setCurrentRole(rolename);
    }, [location]);


    const onTopbarItemClick = (event) => {
        topbarItemClick = true;
        if (activeTopbarItem === event.item) setActiveTopbarItem(null);
        else {
            setActiveTopbarItem(event.item);
        }

        event.originalEvent.preventDefault();
    };

    const onMobileTopbarButtonClick = (event) => {
        setMobileTopbarActive((prevState) => !prevState);
        event.preventDefault();
    };

    const onDocumentClick = (event) => {

        if (!topbarItemClick) {
            setActiveTopbarItem(null);
        }

        if (inlineMenuActive[currentInlineMenuKey.current] && !inlineMenuClick) {
            let menuKeys = { ...inlineMenuActive };
            menuKeys[currentInlineMenuKey.current] = false;
            setInlineMenuActive(menuKeys);
        }

        topbarItemClick = false;
        inlineMenuClick = false;
    };

    const layoutContainerClassName = classNames('layout-wrapper  layout-menu-light layout-topbar-blue layout-menu-horizontal p-input-filled');

    useEffect(() => {
        console.log(
            'logged in'
        );
    }, [isAuthenticated]);

    const login = async () => {
        instance.loginPopup(AdfsConfig).then(async (res) => {
            localStorage.setItem("AccountId", res.account.homeAccountId);
        }).catch(e => {
            // console.log("LOGIN ERROR", e);
        });
    }

    const RequestAccessToken = async () => {
        const request = {
            ...loginRequest,
            account: accounts[0]
        };

        console.log("RequestAccessToken", request)

        // Silently acquires an access token which is then attached to a request for Microsoft Graph data
        instance.acquireTokenSilent(request).then(async (response) => {
            //console.log(response.accessToken);
            let user = await callMsGraph(response.accessToken);

            let newEmail = "";
            var mailcheck = user.mail.includes("tvslogistics.onmicrosoft.com");

            if (mailcheck) {
                newEmail = user.mail.replace("tvslogistics.onmicrosoft.com", "tvsscs.com");
            }
            else {
                newEmail = user.mail;
            }

            let buff = Encode(newEmail);
            localStorage.setItem("LoginEmail", buff);
            this.props.handleSessionLogin();
            // setLoading(true);

        }).catch((e) => {
            // fallback to interaction when silent call fails
            //return instance.acquireTokenPopup(request)
        });
        // if (!loadings){
        //   //RequestAccessToken();
        // }

    }

    const callMsGraph = async (accessToken) => {
        return new Promise(async (resolve) => {
            const headers = new Headers();
            const bearer = `Bearer ${accessToken}`;
            headers.append("Authorization", bearer);
            const options = {
                method: "GET",
                headers: headers
            };

            const responses = await fetch(graphConfig.graphMeEndpoint, options);
            const json = await responses.json();

            resolve(json);
        }, 100);
    }

    const logout = async () => {
        var LoginResult = localStorage.getItem("LoginResult");
        if (LoginResult !== null && LoginResult !== "") {
            const jwtde = Decode(LoginResult);
            let LoginUserKey = jwtde[0].userkey;

            var oData = {
                "body": {
                    "type": "USERLOGOUT",
                    "userkey": LoginUserKey,
                    "logdate": moment().format("YYYY-MM-DD"),
                }
            }

            const responses = await fetch(DEV_URL, {
                method: "post",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify(oData),
            });

            const json = await responses.json();

            if (json.body.statuscode === 200) {
                if (isAuthenticated) {
                    instance.logoutPopup(AdfsConfig).then(async (res) => {
                        //console.log(res);
                        sessionStorage.clear();
                        localStorage.setItem("LoginResult", null);
                        localStorage.clear();
                        window.location.href = "/";
                    }).catch(e => {
                        //console.log(e);
                    });

                }
                else {
                    window.location.href = "/";
                }
            }
            else {
                window.location.href = "/";
            }
        }
        else {
            sessionStorage.clear();
            localStorage.setItem("LoginResult", null);
            localStorage.clear();
            window.location.href = "/";
        }
    }

    const handleLoginResult = async (result) => {
        localStorage.setItem("LoginResult", result);
        setUserAuthenticated(true);
    };


    const switchRoles = async (keys, rolename, projkey) => {
        setCurrentRole(rolename);
        let itemsList = [];
        let LoginRoleKey = keys;
        let LoginProjKey = projkey;
        let itemobj = {};
        var oData = {
            body: {
                type: "USERMENUMAPEMPLOYEEDETAILS",
                rolekey: LoginRoleKey,
                projectkey: LoginProjKey,
            },
        };
        fetch(DEV_URL, {
            method: "post",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify(oData),
        })
            .then((res) => res.json())
            .then((result) => {
                if (result.body.statuscode === 200) {
                    if (result.body.bodymsg.length > 0) {
                        let currentrole = "";
                        for (var i = 0; i < result.body.bodymsg.length; i++) {
                            itemobj = {};
                            itemobj.label = result.body.bodymsg[i].menuname;
                            itemobj.icon = 'pi pi-fw pi-pencil';
                            itemobj.to = result.body.bodymsg[i].menuurl;
                            itemsList.push(itemobj);
                            if (result.body.bodymsg[i].islanding) {
                                currentrole = result.body.bodymsg[i].menuurl;
                            }
                        }
                        if (currentrole !== "") {
                            let rolelist = JSON.parse(localStorage.getItem("rolelist")) || [];
                            rolelist.map(async (item) => {
                                if (item.rolekey === keys) {
                                    localStorage.setItem("UserRoleKey", Encode(item.rolekey));
                                    localStorage.setItem("UserRoleKeyName", Encode(item.rolename));
                                }
                            });
                            setLoading(true);
                            navigate('/userrole');
                            setTimeout(() => {
                                setLoading(false);
                                setTimeout(() => navigate(currentrole), 100);
                            }, 200);
                        }
                    } else {
                        itemsList = [];
                    }
                } else {
                    itemsList = [];
                }
            });
    }

    return (
        <RTLContext.Provider value={isRTL}>

            {location.pathname === '/' ?
                (
                    <Routes>
                        <><Route path="/" element={<BITSPosition login={login}
                            isAuthenticated={isAuthenticated}
                            RequestAccessToken={RequestAccessToken}
                            onLoginSuccess={handleLoginResult}
                            switchRoles={switchRoles}
                        />} />
                        </>
                    </Routes>
                )
                :
                loading ? (
                    <div style={{
                        position: 'fixed',
                        top: 0,
                        left: 0,
                        width: '100vw',
                        height: '100vh',
                        display: 'flex',
                        justifyContent: 'center',
                        alignItems: 'center',
                        zIndex: 9999
                    }}>
                        <ProgressSpinner style={{ width: '50px', height: '50px' }} strokeWidth="8" fill="var(--surface-ground)" animationDuration=".5s" />
                    </div>
                )
                    : (<div className={layoutContainerClassName} onClick={onDocumentClick}>
                        <AppTopbar
                            activeTopbarItem={activeTopbarItem}
                            onTopbarItemClick={onTopbarItemClick}
                            onMobileTopbarButtonClick={onMobileTopbarButtonClick}
                            mobileTopbarActive={mobileTopbarActive}
                            switchRoles={switchRoles}
                            currentRole={currentRole}
                            navigate={navigate}
                        />
                        <div className="layout-main">
                            <AppBreadcrumb routes={routes} />
                            <div className="layout-content">
                                <Routes>
                                    <Route path="/securitymodel/user" element={<User logout={logout}
                                        navigate={navigate} />} />
                                    <Route path="/securitymodel/menu" element={<Menu logout={logout}
                                        navigate={navigate} />} />
                                    <Route path="/securitymodel/role" element={<Role logout={logout}
                                        navigate={navigate} />} />
                                    <Route path="/securitymodel/rolemap" element={<Rolemap logout={logout}
                                        navigate={navigate} />} />
                                    <Route path="/securitymodel/tab" element={<Tab logout={logout}
                                        navigate={navigate} />} />
                                    <Route path="/s2bglobal/s2bmasters" element={<S2BMasters logout={logout}
                                        navigate={navigate} />} />
                                    <Route path="/s2bglobal/s2bcustomeraccountmaster" element={<S2BCustomerAccountMaster logout={logout}
                                        navigate={navigate} />} />
                                    <Route path="/s2bglobal/s2bcustomerusermapping" element={<S2BCustomerMapping logout={logout}
                                        navigate={navigate} />} />
                                    <Route path="/s2bglobal/s2bpredefinedmaster" element={<S2BPreDefinedRuleMaster logout={logout}
                                        navigate={navigate} />} />
                                    <Route path="/s2bglobal/s2boutputdatamapping" element={<S2BOutputDataMapping logout={logout}
                                        navigate={navigate} />} />
                                    <Route path="/s2bglobal/s2binvoicingmasters" element={<S2BInvoicingMasters logout={logout}
                                        navigate={navigate} />} />
                                    <Route path="/s2bglobal/s2bservicedaymaster" element={<S2BServiceDayMaster logout={logout}
                                        navigate={navigate} />} />
                                    <Route path="/s2bglobal/s2bglobaltechadmin" element={<S2BGlobalTechAdmin logout={logout}
                                        navigate={navigate} />} />

                                    <Route path="/s2bglobal/s2bcmstechadmin" element={<S2BCMSTechAdmin logout={logout}
                                        navigate={navigate} />} />


                                    <Route path="/s2bglobal/s2bglobalratemaster" element={<S2BGlobalRateMaster logout={logout}
                                        navigate={navigate}
                                        userRole={currentRole}
                                    />} />
                                    <Route path="/s2bglobal/s2bratemaster" element={<S2BRateMaster logout={logout}
                                        navigate={navigate} />} />
                                    <Route path="/s2bglobal/s2badditionalratemaster" element={<S2BAdditionalRateMaster logout={logout}
                                        navigate={navigate} />} />
                                    <Route path="/s2bglobal/s2badjustmentfactor" element={<S2BAdjustmentFactor logout={logout}
                                        navigate={navigate} />} />
                                    <Route path="/s2bglobal/s2braterevision" element={<S2BRateRevision logout={logout}
                                        navigate={navigate} />} />


                                    <Route path="/s2bglobal/s2bcmsratemaster" element={<S2BCMSRateMaster logout={logout}
                                        navigate={navigate} />} />

                                    <Route path="/s2bglobal/s2bglobaltechconfigurator" element={<S2BGlobalTechConfigurator logout={logout}
                                        navigate={navigate} />} />
                                    <Route path="/s2bglobal/s2bcustomersourcemaster" element={<S2BCustomerSourceMaster logout={logout}
                                        navigate={navigate} />} />
                                    <Route path="/s2bglobal/s2bcustomersourcetos2bdatamapping" element={<S2BCustomerSourcetoS2BDataMapping logout={logout}
                                        navigate={navigate} />} />
                                    <Route path="/s2bglobal/s2bserviceexception" element={<S2BServiceException logout={logout}
                                        navigate={navigate} />} />
                                    <Route path="/s2bglobal/s2brulemapping" element={<S2BRuleMapping logout={logout}
                                        navigate={navigate} />} />
                                    <Route path="/s2bglobal/s2bruleparametermapping" element={<S2BRuleParameterMapping logout={logout}
                                        navigate={navigate} />} />
                                    <Route path="/s2bglobal/s2bserviceruleparametermapping" element={<S2BServiceRuleParameterMapping logout={logout}
                                        navigate={navigate} />} />
                                    <Route path="/s2bglobal/s2buserdefinedrulemaster" element={<S2BUserDefinedRuleMaster logout={logout}
                                        navigate={navigate} />} />
                                    <Route path="/s2bglobal/s2bformulaconfiguration" element={<S2BFormulaConfiguration logout={logout}
                                        navigate={navigate} />} />
                                    <Route path="/s2bglobal/s2bcustomerdestinationmaster" element={<S2BCustomerDestinationMaster logout={logout}
                                        navigate={navigate} />} />
                                    <Route path="/s2bglobal/s2bcustomerdestinationdatamapping" element={<S2BCustomerDestinationDataMapping logout={logout}
                                        navigate={navigate} />} />
                                    <Route path="/s2bglobal/s2bsummarydatamapping" element={<S2BSummaryDataMapping logout={logout}
                                        navigate={navigate} />} />
                                    <Route path="/s2bglobal/s2bschedulemaster" element={<S2BScheduleMaster logout={logout}
                                        navigate={navigate} />} />

                                    <Route path="/s2bglobal/s2bcmstechconfigurator" element={<S2BCMSTechConfigurator logout={logout}
                                        navigate={navigate} />} />

                                    <Route path="/s2bglobal/s2bautomate" element={<S2BGlobalTechAdmin logout={logout}
                                        navigate={navigate} />} />
                                    <Route path="/s2bglobal/s2bglobalbilling" element={<S2BGlobalBilling logout={logout}
                                        navigate={navigate} />} />
                                    <Route path="/s2bglobal/s2binvoicingreport" element={<S2BInvoicingReport logout={logout}
                                        navigate={navigate} />} />
                                    <Route path="/s2bglobal/s2bchargesummary" element={<S2BChargeSummary logout={logout}
                                        navigate={navigate} />} />
                                    <Route path="/s2bglobal/s2btransactions" element={<S2BTransactions logout={logout}
                                        navigate={navigate} />} />
                                    <Route path="/s2bglobal/s2bexceptionhandling" element={<S2BGlobalExceptionBilling logout={logout}
                                        navigate={navigate} />} />
                                    <Route path="/s2bglobal/s2breports" element={<S2BReports logout={logout}
                                        navigate={navigate} />} />
                                    <Route path="/s2bglobal/s2bscheduleerrorlogs" element={<S2BScheduleErrorLogs logout={logout}
                                        navigate={navigate} />} />

                                    <Route path="/s2bglobal/s2badhoctransactions" element={<S2BAdhocTransactions logout={logout}
                                        navigate={navigate} />} />
                                    <Route path="/s2bglobal/s2bcmsbilling" element={<S2BCMSBilling logout={logout}
                                        navigate={navigate} />} />
                                </Routes>
                            </div>

                            <AppFooter />
                        </div>
                    </div>)
            }

        </RTLContext.Provider >
    );
};

export default App;
